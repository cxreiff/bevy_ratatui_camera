use std::fmt::Debug;

use bevy::prelude::{Component, Entity};
use image::DynamicImage;
use ratatui::widgets::Widget;
use ratatui::{prelude::*, widgets::WidgetRef};

use crate::widget_strategy_halfblocks::RatatuiCameraWidgetHalf;
use crate::widget_strategy_luminance::RatatuiCameraWidgetLuminance;
use crate::widget_strategy_none::RatatuiCameraWidgetNone;
use crate::{RatatuiCameraEdgeDetection, RatatuiCameraStrategy};

/// Ratatui widget that will be inserted into each RatatuiCamera containing entity and updated each
/// frame with the last image rendered by the camera. When drawn in a ratatui buffer, it will use
/// the RatatuiCamera's specified RatatuiCameraStrategy to convert the rendered image to unicode
/// characters, and will draw them in the buffer.
///
#[derive(Component, Debug)]
pub struct RatatuiCameraWidget {
    /// Associated entity.
    pub entity: Entity,

    /// RatatuiCamera camera's rendered image copied back from the GPU.
    pub camera_image: DynamicImage,

    /// RatatuiCamera camera's sobel texture generated by the GPU, if any.
    pub sobel_image: Option<DynamicImage>,

    /// Strategy used to convert the rendered image to unicode.
    pub strategy: RatatuiCameraStrategy,

    /// RatatuiCamera's edge detection settings, if any.
    pub edge_detection: Option<RatatuiCameraEdgeDetection>,

    /// The area this widget was most recently rendered within.
    pub last_area: Rect,

    /// A list of boxed widgets that will be rendered on top of the camera image using the same
    /// render area.
    pub overlay_widgets: Vec<Box<dyn RatatuiCameraOverlayWidget>>,
}

impl Widget for &mut RatatuiCameraWidget {
    fn render(self, area: Rect, buf: &mut Buffer) {
        if self.last_area != area {
            self.last_area = area;
            return;
        }

        let render_area = self.calculate_render_area(area);
        let (camera_image, sobel_image) = self.resize_images_to_area(render_area);

        match self.strategy {
            RatatuiCameraStrategy::HalfBlocks(ref strategy_config) => {
                RatatuiCameraWidgetHalf::new(
                    camera_image,
                    sobel_image,
                    strategy_config,
                    &self.edge_detection,
                )
                .render_ref(render_area, buf);
            }
            RatatuiCameraStrategy::Luminance(ref strategy_config) => {
                RatatuiCameraWidgetLuminance::new(
                    camera_image,
                    sobel_image,
                    strategy_config,
                    &self.edge_detection,
                )
                .render_ref(render_area, buf);
            }
            RatatuiCameraStrategy::None => {
                RatatuiCameraWidgetNone::new(camera_image, sobel_image, &self.edge_detection)
                    .render_ref(render_area, buf);
            }
        }

        for widget in &self.overlay_widgets {
            widget.render_ref(render_area, buf);
        }
    }
}

impl RatatuiCameraWidget {
    /// Add an overlay widget to be drawn on top of the camera render.
    ///
    /// Using this method rather than calling `render()` on the widget directly provides two
    /// benefits:
    ///
    /// - The widget will be rendered using the same calculated render area used for drawing the
    ///   camera render (e.g. when empty gutters are used to preserve aspect ratio, pushed widgets
    ///   will have their render methods called with an area excluding those gutters
    ///   automatically).
    ///
    /// - Their rendering will be skipped when the camera image render is skipped (when the draw
    ///   area has changed since the last frame and the render texture needs to be resized), which
    ///   prevents the widgets from "flashing" in the wrong place for one frame.
    ///
    /// If you need more control over rendering the widgets but would still like these two
    /// behaviors:
    ///
    /// - Call `calculate_render_area()` on your `RatatuiCameraWidget` to get the correct
    ///   area that the camera render will actually display (not necessary if autoresize is turned
    ///   on, as aspect ratio is not preserved and the result will always match the input area.
    ///
    /// - Compare the `last_area` attribute on your `RatatuiCameraWidget` to this frame's area, and
    ///   skip rendering the overlay widgets for this frame if they differ.
    pub fn push_overlay_widget(&mut self, widget: Box<dyn RatatuiCameraOverlayWidget>) {
        self.overlay_widgets.push(widget);
    }
}

/// Implementors of this trait can be pushed into a `RatatuiCameraWidget` overlay list, where it
/// will be drawn on top of the camera render.
pub trait RatatuiCameraOverlayWidget: WidgetRef + Debug + Send + Sync {}
